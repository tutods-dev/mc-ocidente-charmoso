/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type VideoUrlWithCover = {
  _type: "videoUrlWithCover";
  url?: string;
  cover: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "imageWithAlt";
  };
};

export type Gallery = Array<{
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt: string;
  caption: string;
  _type: "image";
  _key: string;
}>;

export type ImageWithAltAndCaption = {
  _type: "imageWithAltAndCaption";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt: string;
  caption: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    target?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "imageWithAlt";
  };
  keywords?: Array<string>;
  cta?: {
    title: string;
    description: string;
    points?: Array<string>;
    button: string;
  };
  social?: Array<{
    network: "website" | "facebook" | "twitter" | "instagram" | "youtube" | "linkedin" | "behance" | "dribble";
    link: string;
    _type: "social";
    _key: string;
  }>;
  contacts?: Array<{
    type: "email" | "phone";
    value: string;
    _type: "contact";
    _key: string;
  }>;
};

export type ImageWithAlt = {
  _type: "imageWithAlt";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt: string;
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  client: string;
  content: string;
  url: string;
  project?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  };
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  headline: string;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  content?: BlockContent;
  gallery?: Gallery;
  showTestimonial?: boolean;
  date?: string;
  local?: string;
  isHighlighted?: boolean;
  services: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "service";
  }>;
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: src/cms/queries/projects/get-highlighted.ts
// Variable: getHighlightedProjectsQuery
// Query:     *[_type == 'project' && isHighlighted == true] [$start...$end] | order(_createdAt desc) {        title,        "slug": slug.current,        "thumbnail": {            ...thumbnail,            "asset": thumbnail.asset->        },        "services": coalesce(services[]->{            _id,            title,            'slug': slug.current        }, [])    }
export type GetHighlightedProjectsQueryResult = Array<{
  title: string;
  slug: string;
  thumbnail: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  services: Array<{
    _id: string;
    title: string;
    slug: string;
  }> | Array<never>;
}>;
// Variable: getHightlightedProjectsFromServiceQuery
// Query:     *[_type == 'project' && isHighlighted == true && $serviceSlug in services[]->slug.current] [$start...$end] | order(_createdAt desc) {        title,        "slug": slug.current,        "thumbnail": {            ...thumbnail,            "asset": thumbnail.asset->        },        "services": coalesce(services[]->{            _id,            title,            'slug': slug.current        }, [])    }
export type GetHightlightedProjectsFromServiceQueryResult = Array<{
  title: string;
  slug: string;
  thumbnail: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  services: Array<{
    _id: string;
    title: string;
    slug: string;
  }> | Array<never>;
}>;
// Source: src/cms/queries/projects/get-project.ts
// Variable: getProjectQuery
// Query:     *[_type == "project" && slug.current == $slug] [0] {      ...,      "slug": slug.current,      "thumbnail": {          ...thumbnail,          "asset": thumbnail.asset->      },      "services": coalesce(services[]->{          _id,          title,          'slug': slug.current      }, []),      "gallery": coalesce(gallery[]{        ...,        "asset": asset->      }, null)    }
export type GetProjectQueryResult = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: string;
  headline: string;
  thumbnail: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  content?: BlockContent;
  gallery: Array<{
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    caption: string;
    _type: "image";
  }> | null;
  showTestimonial?: boolean;
  date?: string;
  local?: string;
  isHighlighted?: boolean;
  services: Array<{
    _id: string;
    title: string;
    slug: string;
  }> | Array<never>;
} | null;
// Source: src/cms/queries/projects/get-projects.ts
// Variable: getTotalOfProjectsQuery
// Query:   count(*[_type == 'project'])
export type GetTotalOfProjectsQueryResult = number;
// Variable: getTotalOfProjectsFromServiceQuery
// Query:   count(*[_type == 'project' && $serviceSlug in services[]->slug.current])
export type GetTotalOfProjectsFromServiceQueryResult = number;
// Variable: getProjectsQuery
// Query:     *[_type == "project"] | order(_createdAt desc) [$start...$end] {      _id,      title,      "slug": slug.current,      headline,      "thumbnail": {          ...thumbnail,          "asset": thumbnail.asset->      },      "services": coalesce(services[]->{          _id,          title,          'slug': slug.current      }, []),    }
export type GetProjectsQueryResult = Array<{
  _id: string;
  title: string;
  slug: string;
  headline: string;
  thumbnail: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  services: Array<{
    _id: string;
    title: string;
    slug: string;
  }> | Array<never>;
}>;
// Source: src/cms/queries/singletons/get-settings.ts
// Variable: getAllSettingsQuery
// Query:     *[_type == "settings"] [0] {        ...,        "thumbnail": {            ...thumbnail,            "asset": thumbnail.asset->        },        "contacts": coalesce(contacts, []),        "social": coalesce(social, [])    }
export type GetAllSettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  thumbnail: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "imageWithAlt";
  };
  keywords?: Array<string>;
  cta?: {
    title: string;
    description: string;
    points?: Array<string>;
    button: string;
  };
  social: Array<{
    network: "behance" | "dribble" | "facebook" | "instagram" | "linkedin" | "twitter" | "website" | "youtube";
    link: string;
    _type: "social";
    _key: string;
  }> | Array<never>;
  contacts: Array<{
    type: "email" | "phone";
    value: string;
    _type: "contact";
    _key: string;
  }> | Array<never>;
} | null;
// Variable: getSeoSettingsQuery
// Query:     *[_type == "settings"] [0] {        title,        description,        "thumbnail": {            ...thumbnail,            "asset": thumbnail.asset->        },    }
export type GetSeoSettingsQueryResult = {
  title: string;
  description: string;
  thumbnail: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "imageWithAlt";
  };
} | null;
// Variable: getCtaSettingsQuery
// Query:     *[_type == "settings"] [0] {        ...cta,        "points": cta.points    }
export type GetCtaSettingsQueryResult = {
  title: string;
  description: string;
  points: Array<string> | null;
  button: string;
} | null;
// Source: src/cms/queries/testimonials/get-project-testimonial.ts
// Variable: getProjectTestimonialQuery
// Query:     *[_type == "testimonial" && project->slug.current == $slug] [0] {      _id,      client,      content,      "url": coalesce(url, null),      _createdAt,      _updatedAt    }
export type GetProjectTestimonialQueryResult = {
  _id: string;
  client: string;
  content: string;
  url: string | null;
  _createdAt: string;
  _updatedAt: string;
} | null;
